import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { loginAction, pushCurrentMessageListAction, resetConversationAction, resetUserAction, SDKReadyAction, showAction, updateConversationListAction, updateCurrentConversationAction, updateCurrentUserProfileAction, updateMessageAction } from './store/actions';
import { conversationSelector, } from './store/selectors';
import { resetCurrentMemberListAction, updateCurrentMemberListAction, updateGroupListAction } from './store/actions/group.action';
import { currentMemberListSelector } from './store/selectors/group.selector';
import TIM from 'tim-js-sdk';
import TIMUploadPlugin from 'tim-upload-plugin';
import { MESSAGE_STATUS, NG_Tim_CONFIG } from './shared.data';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class TimHelperService {
    constructor(store, config) {
        this.store = store;
        this.config = config;
        this.eventBus$ = new Subject();
        this.totalUnRead = new Subject();
        this.initTim(config);
        // 初始化监听器
        this.initListener();
        // 获取当前会话
        this.store.select(conversationSelector).subscribe(res => {
            this.conversation = res;
        });
        // 获取当前成员
        this.store.select(currentMemberListSelector).subscribe(res => {
            this.currentMemberList = res;
        });
    }
    login(userId, userSig) {
        if (!userSig) {
            throw new Error('请配置签名！');
        }
        this.tim.login({ userID: userId, userSig })
            .then((imResponse) => {
            this.eventBus$.next('login');
            this.store.dispatch(loginAction({ isLogin: true }));
            // this.store.dispatch(startComputeCurrentAction());
            this.store.dispatch(showAction({ msgType: MESSAGE_STATUS.success, message: '登录成功！' }));
            if (imResponse.data.repeatLogin === true) {
                // 标识账号已登录，本次登录操作为重复登录。v2.5.1 起支持
                console.log(imResponse.data.errorInfo);
            }
        }).catch((imError) => {
            console.warn('login error:', imError); // 登录失败的相关信息
        });
    }
    logout() {
        // 若有当前会话，在退出登录时已读上报
        if (this.conversation.currentConversation.conversationID) {
            this.tim.setMessageRead({ conversationID: this.conversation.currentConversation.conversationID });
        }
        this.tim.logout().then((res) => {
            this.eventBus$.next('logout');
            // this.store.dispatch(stopComputeCurrentAction());
            this.store.dispatch(loginAction({ isLogin: false }));
            this.store.dispatch(resetUserAction());
            this.store.dispatch(resetConversationAction());
            this.store.dispatch(showAction({ msgType: MESSAGE_STATUS.success, message: '已退出！' }));
        });
    }
    // 初始化tim监听函数
    initListener() {
        // sdk ready
        this.tim.on(TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this);
        // SDK NOT READT
        this.tim.on(TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this);
        // 被踢出
        this.tim.on(TIM.EVENT.KICKED_OUT, this.onKickOut, this);
        // SDK内部出错
        this.tim.on(TIM.EVENT.ERROR, this.onError, this);
        // 收到新消息
        this.tim.on(TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage, this);
        // 会话列表更新
        this.tim.on(TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList, this);
        // 群组列表更新
        this.tim.on(TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList, this);
        // 网络监测
        this.tim.on(TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange, this);
        // 已读回执
        this.tim.on(TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer, this);
    }
    onReadyStateUpdate({ name }) {
        const isSDKReady = name === TIM.EVENT.SDK_READY ? true : false;
        this.store.dispatch(SDKReadyAction({ SDKReadyState: isSDKReady }));
        if (isSDKReady) {
            this.tim.getMyProfile()
                .then(({ data }) => {
                this.store.dispatch(updateCurrentUserProfileAction({ profile: data }));
            })
                .catch(error => {
                this.store.dispatch(showAction({
                    msgType: MESSAGE_STATUS.warning,
                    message: error.message
                }));
            });
        }
    }
    onKickOut(event) {
        this.eventBus$.next('logout');
        // this.store.dispatch(stopComputeCurrentAction());
        this.store.dispatch(loginAction({ isLogin: false }));
        this.store.dispatch(resetUserAction());
        this.store.dispatch(resetConversationAction());
        this.store.dispatch(showAction({ msgType: MESSAGE_STATUS.warning, message: '由于多实例登录被踢出，请重新登录!' }));
    }
    onError({ data }) {
        if (data.message !== 'Network Error') {
            console.log('%c error', 'color:red;font-size:20px;', data);
        }
    }
    onMessageReadByPeer(event) {
        console.log('已回执', event);
    }
    onReceiveMessage({ data: messageList }) {
        // this.handleVideoMessage(messageList);
        // this.handleAt(messageList);
        // this.handleQuitGroupTip(messageList);
        this.store.dispatch(pushCurrentMessageListAction({ message: messageList }));
    }
    // 会话列表更新
    onUpdateConversationList(event) {
        this.store.dispatch(updateConversationListAction({ conversationList: event.data }));
    }
    // 群列表更新
    onUpdateGroupList(event) {
        this.store.dispatch(updateGroupListAction({ groupList: event.data }));
    }
    onNetStateChange(event) {
        console.log('网络监测::', event);
    }
    /**
     * 切换会话
     * 调用时机：切换会话时
     */
    checkoutConversation(conversationID) {
        this.store.dispatch(resetCurrentMemberListAction());
        // 1.切换会话前，将切换前的会话进行已读上报
        if (this.conversation.currentConversation.conversationID) {
            const prevConversationID = this.conversation.currentConversation.conversationID;
            this.tim.setMessageRead({ conversationID: prevConversationID });
        }
        // 2.待切换的会话也进行已读上报
        this.tim.setMessageRead({ conversationID });
        // 3. 获取会话信息
        return this.tim.getConversationProfile(conversationID).then((res) => {
            // 3.1 更新当前会话
            this.store.dispatch(updateCurrentConversationAction({ conversation: res.data.conversation }));
            // 3.2 获取消息列表
            this.getMessageList(conversationID);
            if (res.data.conversation.type === TIM.TYPES.CONV_GROUP) {
                this.getGroupMemberList(res.data.conversation.groupProfile.groupID);
            }
            return Promise.resolve();
        });
        // .catch(err => {
        //   this.store.dispatch(showAction({ msgType: MESSAGE_STATUS.error, message: err }));
        // });
    }
    /**
     * @description 获取消息
     */
    getMessageList(conversationID) {
        if (this.conversation.isCompleted) {
            this.store.dispatch(showAction({
                msgType: MESSAGE_STATUS.info,
                message: '已经没有更多的历史消息了哦'
            }));
            return;
        }
        const { nextReqMessageID, currentMessageList } = this.conversation;
        this.tim.getMessageList({ conversationID, nextReqMessageID, count: 15 })
            .then((imResponse) => {
            this.store.dispatch(updateMessageAction({
                nextReqMessageID: imResponse.data.nextReqMessageID,
                isCompleted: imResponse.data.isCompleted,
                currentMessageList: [...imResponse.data.messageList, ...currentMessageList]
            }));
        });
    }
    /**
     * @description 获取群成员
     */
    getGroupMemberList(groupID) {
        this.tim.getGroupMemberList({
            groupID,
            offset: this.currentMemberList.length,
            count: 30
        }).then((imResponse) => {
            this.store.dispatch(updateCurrentMemberListAction({ currentMemberList: imResponse.data.memberList }));
        });
    }
    initTim(config) {
        // const cosImport = await import('cos-js-sdk-v5');
        // const timImport = await import('tim-js-sdk');
        this.tim = TIM.create({
            SDKAppID: config.sdkAppId,
            oversea: config.oversea,
        });
        // 无日志级别
        this.tim.setLogLevel(config.level || 1);
        // 注册 cos
        this.tim.registerPlugin({ 'tim-upload-plugin': TIMUploadPlugin });
    }
}
TimHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: TimHelperService, deps: [{ token: i1.Store }, { token: NG_Tim_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
TimHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: TimHelperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: TimHelperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NG_Tim_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,